; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = Firmware for ESP82xx/ESP32 for easy IoT deployment of sensors.
extra_configs = 
	platformio_core_defs.ini
	platformio_esp82xx_base.ini
	platformio_esp82xx_envs.ini
	platformio_esp32_envs.ini
	platformio_special_envs.ini
default_envs = custom_ESP8266_4M1M, custom_ESP32_4M316k

[compiler_warnings]
build_flags = -Wall -Wno-parentheses -fdiagnostics-show-option

[minimal_size]
build_flags = 
	-Os
	-ffunction-sections
	-fdata-sections
	-Wl,--gc-sections
	-s

[espota]
upload_protocol = espota
upload_flags_esp8266 = 
	--port=18266
upload_flags_esp32 = 
	--port=3232
build_flags = -DFEATURE_ARDUINO_OTA
upload_port = 192.168.1.152

[debug_flags]
build_flags = 

[mqtt_flags]
build_flags = -DMQTT_MAX_PACKET_SIZE=1024

[extra_scripts_esp8266]
extra_scripts = tools/pio/gzip-firmware.py
	${extra_scripts_default.extra_scripts}

[extra_scripts_default]
extra_scripts = pre:tools/pio/generate-compiletime-defines.py
	tools/pio/copy_files.py

[common]
lib_ldf_mode = chain
lib_archive = false
framework = arduino
upload_speed = 115200
monitor_speed = 115200
targets = 
extra_scripts = pre:tools/pio/pre_default_check.py
	${extra_scripts_esp8266.extra_scripts}

[env]
extends = common

[esp82xx_defaults]
build_flags = -D BUILD_GIT='"${sysenv.TRAVIS_TAG}"'
	-D NDEBUG
	-lstdc++ -lsupc++
	-mtarget-align
	-DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
	-DVTABLES_IN_FLASH
	-DPUYA_SUPPORT=1

[esp82xx_2_5_x]
build_flags = -D BUILD_GIT='"${sysenv.TRAVIS_TAG}"'
	-DNDEBUG
	-mtarget-align
	-DVTABLES_IN_FLASH
	-fno-exceptions
	-lstdc++
	-DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY_LOW_FLASH
	-DPUYA_SUPPORT=1
	-DCORE_POST_2_5_0

[esp82xx_2_6_x]
build_flags = ${esp82xx_2_5_x.build_flags}
	-O2
	-DBEARSSL_SSL_BASIC
	-DCORE_POST_2_6_0

[core_2_4_2]
platform = https://github.com/TD-er/platform-espressif8266.git#patch/v1.8.0_Puya
build_flags = ${esp82xx_defaults.build_flags} -DARDUINO_ESP8266_RELEASE_2_4_2 -DFORCE_PRE_2_5_0
lib_ignore = ESP32_ping, ESP32WebServer, IRremoteESP8266, HeatpumpIR
	
	
	
	
	
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
	
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703
	
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3

[core_2_6_2]
platform = espressif8266@2.3.1
platform_packages = 
	framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git#2.6.2
build_flags = ${esp82xx_2_6_x.build_flags}
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703

[core_2_6_2_sdk3]
platform = espressif8266@2.3.1
platform_packages = 
	framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git#2.6.2
build_flags = ${esp82xx_2_6_x.build_flags}
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3

[core_2_6_3]
platform = espressif8266@2.3.2
platform_packages = 
	framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git#2.6.3
build_flags = ${esp82xx_2_6_x.build_flags}
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_190703

[core_2_6_3_sdk3]
platform = espressif8266@2.3.2
platform_packages = 
	framework-arduinoespressif8266 @ https://github.com/esp8266/Arduino.git#2.6.3
build_flags = ${esp82xx_2_6_x.build_flags}
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK3

[core_stage]
platform = https://github.com/platformio/platform-espressif8266.git#feature/stage
build_flags = ${esp82xx_2_6_x.build_flags}
	-DARDUINO_ESP8266_RELEASE='"2.7.0-dev stage"'
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22x_191105

[core_esp32_1_11_0]
platform = espressif32@1.11.0

[core_esp32_stage]
platform = https://github.com/platformio/platform-espressif32.git#feature/stage

[regular_platform]
build_unflags = 
build_flags = ${core_2_6_3.build_flags}
platform = ${core_2_6_3.platform}
platform_packages = ${core_2_6_3.platform_packages}

[core262_sdk3_platform]
build_unflags = 
build_flags = ${core_2_6_3_sdk3.build_flags}
platform = ${core_2_6_3_sdk3.platform}
platform_packages = ${core_2_6_3_sdk3.platform_packages}

[beta_platform]
build_unflags = 
build_flags = ${core_stage.build_flags}
platform = ${core_stage.platform}

[esp82xx_common]
extends = common
board_build.f_cpu = 80000000L
build_flags = ${debug_flags.build_flags} ${mqtt_flags.build_flags} -DHTTPCLIENT_1_1_COMPATIBLE=0
build_unflags = -DDEBUG_ESP_PORT
lib_deps = https://github.com/TD-er/ESPEasySerial.git
lib_ignore = ESP32_ping, ESP32WebServer, IRremoteESP8266, HeatpumpIR, SD(esp8266), SDFS
board = esp12e

[normal]
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}

[normal_beta]
platform = ${beta_platform.platform}
build_flags = ${beta_platform.build_flags}

[testing]
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags} -DPLUGIN_BUILD_TESTING

[testing_beta]
platform = ${beta_platform.platform}
build_flags = ${beta_platform.build_flags} -DPLUGIN_BUILD_TESTING

[dev]
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags} -DPLUGIN_BUILD_DEV

[ir]
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
lib_ignore = ESP32_ping, ESP32WebServer, SD(esp8266), SDFS

[minimal_ir]
extends = ir
build_flags = ${ir.build_flags} -DPLUGIN_BUILD_MINIMAL_IR

[minimal_ir_extended]
extends = ir
build_flags = ${ir.build_flags} -DPLUGIN_BUILD_MINIMAL_IRext

[normal_ir]
extends = ir
build_flags = ${ir.build_flags} -DPLUGIN_BUILD_NORMAL_IR

[normal_ir_extended]
extends = ir
build_flags = ${ir.build_flags} -DPLUGIN_BUILD_IR_EXTENDED

[normal_ir_extended_no_rx]
extends = ir
build_flags = ${ir.build_flags} -DPLUGIN_BUILD_IR_EXTENDED_NO_RX

[esp82xx_1M]
extends = esp82xx_common
board_build.flash_mode = dout
board_upload.maximum_size = 786432
build_flags = -Wl,-Tesp8266.flash.1m128.ld
	-DSIZE_1M
	-DBUILD_NO_DEBUG
	${esp82xx_common.build_flags}

[esp8266_1M]
extends = esp82xx_1M
board = esp01_1m

[esp8285_1M]
extends = esp82xx_1M
board = esp8285
build_flags = ${esp8266_1M.build_flags} -DESP8285

[esp82xx_1M_OTA]
extends = esp82xx_common
board_build.flash_mode = dout
board_upload.maximum_size = 616448
build_flags = ${esp82xx_1M.build_flags} -DPLUGIN_BUILD_MINIMAL_OTA

[esp8266_1M_OTA]
extends = esp82xx_1M_OTA
board = esp01_1m

[esp8285_1M_OTA]
extends = esp82xx_1M_OTA
board = esp8285
build_flags = ${esp82xx_1M_OTA.build_flags} -DESP8285

[esp8266_2M256]
extends = esp82xx_common
board = esp12e
board_build.flash_mode = dio
board_upload.maximum_size = 1044464
build_flags = -Wl,-Tesp8266.flash.2m256.ld
	${esp82xx_common.build_flags}

[espWroom2M]
extends = esp82xx_common
board = esp12e
board_build.flash_mode = dio
board_upload.maximum_size = 1044464
build_flags = -Wl,-Tesp8266.flash.2m.ld
	${esp82xx_common.build_flags}

[espWroom2M256]
extends = esp82xx_common
board_build.flash_mode = dout
board_upload.maximum_size = 1044464
board = esp_wroom_02
build_flags = -Wl,-Tesp8266.flash.2m256.ld
	${esp82xx_common.build_flags}

[esp8266_4M1M]
extends = esp82xx_common
board = esp12e
board_build.flash_mode = dio
board_upload.maximum_size = 1044464
build_flags = -Wl,-Tesp8266.flash.4m1m.ld
	${esp82xx_common.build_flags}

[esp8266_4M2M]
extends = esp82xx_common
board = esp12e
board_build.flash_mode = dio
board_upload.maximum_size = 1044464
build_flags = -Wl,-Tesp8266.flash.4m2m.ld
	${esp82xx_common.build_flags}

[esp8266_16M]
extends = esp82xx_common
board = esp12e
board_build.flash_mode = dio
board_upload.maximum_size = 1044464
build_flags = -Wl,-Tesp8266.flash.16m14m.ld
	-DSPIFFS_MAX_OPEN_FILES=20
	${esp82xx_common.build_flags}

[hard_esp82xx]
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	-DBUILD_NO_DEBUG
	-DPLUGIN_BUILD_CUSTOM

[env:custom_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:custom_sdk3_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${core_2_6_3_sdk3.platform}
build_flags = ${core_2_6_3_sdk3.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:custom_beta_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${beta_platform.platform}
build_flags = ${beta_platform.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:custom_ESP8266_4M2M]
extends = esp8266_4M2M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:custom_ESP8266_1M]
extends = esp8266_1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer, ESP8266WiFiMesh
extra_scripts = pre:pre_custom_esp82xx.py

[env:normal_ESP8266_1M]
extends = esp8266_1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_1M.build_flags}

[env:normal_sdk3_ESP8266_1M]
extends = esp8266_1M
platform = ${core_2_6_3_sdk3.platform}
build_flags = ${core_2_6_3_sdk3.build_flags}
	${esp8266_1M.build_flags}

[env:normal_ESP8266_1M_VCC]
extends = esp8266_1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_1M.build_flags}
	-D FEATURE_ADC_VCC=true

[env:normal_ESP8285_1M]
extends = esp8285_1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8285_1M.build_flags}

[env:normal_WROOM02_2M]
extends = espWroom2M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${espWroom2M.build_flags}

[env:normal_WROOM02_2M256]
extends = espWroom2M256
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${espWroom2M256.build_flags}

[env:normal_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_4M1M.build_flags}

[env:normal_ESP8266_16M]
extends = esp8266_16M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_16M.build_flags}

[env:minimal_core_242_ESP8266_1M_OTA]
extends = esp8266_1M_OTA
platform = ${core_2_4_2.platform}
build_flags = ${core_2_4_2.build_flags}
	${esp8266_1M_OTA.build_flags}

[env:minimal_core_242_ESP8285_1M_OTA]
extends = esp8285_1M_OTA
platform = ${core_2_4_2.platform}
build_flags = ${core_2_4_2.build_flags}
	${esp8285_1M_OTA.build_flags}

[env:minimal_core_261_ESP8266_1M_OTA]
extends = esp8266_1M_OTA
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8266_1M_OTA.build_flags}

[env:minimal_core_261_ESP8285_1M_OTA]
extends = esp8285_1M_OTA
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${esp8285_1M_OTA.build_flags}

[env:minimal_core_261_sdk3_ESP8266_1M_OTA]
extends = esp8266_1M_OTA
platform = ${core_2_6_3_sdk3.platform}
build_flags = ${core_2_6_3_sdk3.build_flags}
	${esp8266_1M_OTA.build_flags}

[env:minimal_core_261_sdk3_ESP8285_1M_OTA]
extends = esp8285_1M_OTA
platform = ${core_2_6_3_sdk3.platform}
build_flags = ${core_2_6_3_sdk3.build_flags}
	${esp8285_1M_OTA.build_flags}

[env:minimal_IRext_ESP8266_1M]
extends = esp8266_1M
platform = ${minimal_ir_extended.platform}
lib_ignore = ${minimal_ir_extended.lib_ignore}
build_flags = ${minimal_ir_extended.build_flags}
	${esp8266_1M.build_flags}
build_unflags = ${esp8266_1M_OTA.build_unflags} -DPLUGIN_BUILD_NORMAL_IR

[env:minimal_IRext_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${minimal_ir_extended.platform}
lib_ignore = ${minimal_ir_extended.lib_ignore}
build_flags = ${minimal_ir_extended.build_flags}
	${esp8266_4M1M.build_flags}

[env:minimal_IRext_ESP8266_4M2M]
extends = esp8266_4M2M
platform = ${minimal_ir_extended.platform}
lib_ignore = ${minimal_ir_extended.lib_ignore}
build_flags = ${minimal_ir_extended.build_flags}
	${esp8266_4M2M.build_flags}

[env:normal_IRext_no_rx_ESP8266_4M2M]
extends = esp8266_4M2M
platform = ${normal_ir_extended_no_rx.platform}
lib_ignore = ${normal_ir_extended_no_rx.lib_ignore}
build_flags = ${normal_ir_extended_no_rx.build_flags}
	${esp8266_4M2M.build_flags}

[env:test_ESP8266_4M1M_VCC]
extends = esp8266_4M1M
platform = ${testing.platform}
build_flags = ${testing.build_flags}
	${esp8266_4M1M.build_flags}
	-DFEATURE_ADC_VCC=true

[env:test_ESP8266_4M1M_VCC_MDNS_SD]
extends = esp8266_4M1M
platform = ${testing.platform}
build_flags = ${testing.build_flags}
	${esp8266_4M1M.build_flags}
	-DFEATURE_ADC_VCC=true
	-DFEATURE_MDNS
	-DFEATURE_SD
lib_ignore = ESP32_ping, ESP32WebServer, IRremoteESP8266, HeatpumpIR

[env:test_beta_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${testing_beta.platform}
build_flags = ${testing_beta.build_flags}
	${esp8266_4M1M.build_flags}

[env:test_beta_ESP8266_16M]
extends = esp8266_16M
platform = ${testing_beta.platform}
build_flags = ${testing_beta.build_flags}
	${esp8266_16M.build_flags}
	-DPIO_FRAMEWORK_ARDUINO_ESPRESSIF_SDK22y

[env:dev_ESP8266_4M1M]
extends = esp8266_4M1M
platform = ${dev.platform}
build_flags = ${dev.build_flags}
	${esp8266_4M1M.build_flags}

[env:hard_SONOFF_POW_4M1M]
extends = esp8266_4M1M, hard_esp82xx
platform = ${hard_esp82xx.platform}
platform_packages = ${hard_esp82xx.platform_packages}
build_flags = ${hard_esp82xx.build_flags}
	${esp8266_4M1M.build_flags}
	-D PLUGIN_SET_SONOFF_POW

[env:hard_other_POW_ESP8285_1M]
extends = esp8266_1M_OTA, hard_esp82xx
platform = ${hard_esp82xx.platform}
platform_packages = ${hard_esp82xx.platform_packages}
build_flags = ${hard_esp82xx.build_flags}
	${esp8266_1M_OTA.build_flags}
	-D PLUGIN_SET_SONOFF_POW

[env:hard_Shelly_1_2M256]
extends = esp8266_2M256, hard_esp82xx
platform = ${hard_esp82xx.platform}
platform_packages = ${hard_esp82xx.platform_packages}
build_flags = ${hard_esp82xx.build_flags}
	${esp8266_2M256.build_flags}
	-D PLUGIN_SET_SHELLY_1

[env:hard_Ventus_W266]
extends = esp8266_1M, hard_esp82xx
platform = ${hard_esp82xx.platform}
platform_packages = ${hard_esp82xx.platform_packages}
build_flags = ${hard_esp82xx.build_flags}
	${esp8266_1M_OTA.build_flags}
	-D PLUGIN_SET_VENTUS_W266

[esp32_common]
extends = common
platform = ${core_esp32_1_11_0.platform}
lib_ignore = AS_BH1750, ESP8266WiFi, ESP8266Ping, ESP8266WebServer, ESP8266HTTPUpdateServer, ESP8266mDNS, IRremoteESP8266, ESPEasy_ESP8266Ping, ESP32_ping, HeatpumpIR
lib_deps = https://github.com/TD-er/ESPEasySerial.git
board_build.f_flash = 80000000L
board_build.flash_mode = dout
board_upload.maximum_size = 1900544
board_build.partitions = esp32_partition_app1810k_spiffs316k.csv
build_unflags = -Wall
build_flags = ${mqtt_flags.build_flags}
	-D BUILD_GIT='"${sysenv.TRAVIS_TAG}"'
	-DCONFIG_FREERTOS_ASSERT_DISABLE
	-DCONFIG_LWIP_ESP_GRATUITOUS_ARP
	-DCONFIG_LWIP_GARP_TMR_INTERVAL=30

[env:custom_ESP32_4M316k]
extends = esp32_common
platform = ${esp32_common.platform}
build_flags = ${esp32_common.build_flags}   -DPLUGIN_BUILD_CUSTOM
board = esp32dev
extra_scripts = pre:pre_custom_esp32.py

[env:test_ESP32_4M316k]
extends = esp32_common
platform = ${esp32_common.platform}
build_flags = ${esp32_common.build_flags}  -DPLUGIN_SET_TEST_ESP32
board = esp32dev

[env:test_ESP32-wrover-kit_4M316k]
extends = esp32_common
platform = ${esp32_common.platform}
build_flags = ${esp32_common.build_flags}  -DPLUGIN_SET_TEST_ESP32
board = esp-wrover-kit
upload_protocol = ftdi
debug_tool = ftdi
debug_extra_cmds = break Misc.ino:3011

[debug_pio]
build_type = debug
check_tool = clangtidy
build_flags = ${compiler_warnings.build_flags}

[env:spec_debug_custom_ESP8266_4M1M]
extends = esp8266_4M1M, debug_pio
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
build_flags = ${regular_platform.build_flags}
	${debug_pio.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:spec_debug_beta_custom_ESP8266_4M1M]
extends = esp8266_4M1M, debug_pio
platform = ${beta_platform.platform}
build_flags = ${beta_platform.build_flags}
	${debug_pio.build_flags}
	${esp8266_4M1M.build_flags}
	-DPLUGIN_BUILD_CUSTOM
lib_ignore = ESP32_ping, ESP32WebServer
extra_scripts = pre:pre_custom_esp82xx.py

[env:spec_debug_custom_ESP32_4M316k]
extends = esp32_common, debug_pio
platform = ${esp32_common.platform}
build_flags = ${esp32_common.build_flags} ${debug_pio.build_flags}   -DPLUGIN_BUILD_CUSTOM
board = esp32dev
extra_scripts = pre:pre_custom_esp32.py

[env:spec_memanalyze_ESP8266]
extends = esp8266_4M1M
platform = ${regular_platform.platform}
platform_packages = ${regular_platform.platform_packages}
lib_ignore = ESP32_ping, ESP32WebServer
build_flags = ${esp8266_4M1M.build_flags} -DMEMORY_ANALYSIS -DPLUGIN_BUILD_CUSTOM -w -DUSE_NON_STANDARD_24_TASKS -DTASKS_MAX=24
extra_scripts = pre:pre_memanalyze.py
